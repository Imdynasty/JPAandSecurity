Spring Data JPA 

1. JPA 동작 방식
1) JPA란?
JPA (Java Persistence API) : ORM 표준 (Object Relational Mapping)
Hibernate Entity Manager
- 자바 영속성 API 
- 영속성 : 상태 변화 감지 메모리 
	: 데이터 값이 변경 : UPDATE 쿼리 
	: 없는 데이터를 추가한 엔티티 : INSERT 쿼리 
	: 데이터 제거 : DELETE 쿼리 

동일한 코드 -> 드라이버 변경 -> 플랫폼에 맞는 쿼리 실행 


H2 데이터베이스 
Oracle 데이터베이스 


2) JPA 동작 방식
	- 엔티티 : 엔티티 클래스의 정의 : 테이블의 정의 
	            : 각각의 엔티티는 데이터 하나 하나 
	
	- 엔티티 매니저 팩토기
	- 엔티티 매니저
		1) find() : 조회, 기본키로 조회, 이미 영속성에 엔티티가 있으면 DB에서 조회 X - 1차 캐시, 성능상 이점 
		2) persist() : 영속성 컨텍스트에 엔티티를 영속  : 상태 감지 시작
		3) remove() : 영속성 상태 -> 제거 상태 : DELETE
		4) flush() : DB 반영 
		5) detach() : 영속성 분리 : 상태감지 X
		6) merge() : 분리된 영속성 -> 영속 상태  : 상태 감지 O
		
	- EntityManagerFactory 
	- EntityManager
	
	
3) 영속성 컨텍스트 사용 시 이점
4) 영속성 컨텍스트 
5) 엔티티의 생명주기
6) 영속성 컨텍스트 사용 시 이점
- 1차 캐시
- 동일성 보장
- 영속성 컨텍스트 쓰기 지연 SQL 저장소
- 트랜잭션을 지원하는 쓰기 지연


참고)
	find() 메서드와 같이 조회시에는 기존 변화가  flush() 되고 조회
7) 설정하기
	- DDL_AUTO
		none : 아무런 변경 X
		create : 애플리케이션 시작시에 기존 테이블 DROP, 새로 생성
		create-drop : 애플리케이션 시작시에 기존 테이블 DROP, 새로 생성, 종료시에도 DROP
		update : 기존 테이블 DROP X, 변경 사항만 반영(제거  X)
		validate : 기존 테이블 DROP X, 변경 사항 체크(변경 사항이 있으면 예외 발생)
		
		
		개발시 : create, update 
		배포 서버 : none, validate 
		
2. Entity 설계하기
1) 엔티티 매핑 관련 애노테이션
@Table : 테이블 명을 직접 지정할 때 
@Enumerated
	EnumType.ORDINAL 기본값 

기본키를 여러개로 조합하는 경우 
@IdClass	
	
	참고)
		Enum 클래스 
			int ordinal() : enum 상수의 순서 번호

@Temporal 
	- Date, Calendar 
	- 날짜만 DB에 기록하는 경우 TemporalType.DATE
	- 시간만 DB에 기록하는 경우 TemporalType.TIME
	- 날짜와 시간을 함께 기록하는 경우 TemporalType.TIMESTAMP

2) @Column 속성 
3) @GeneratedValue 


Repository 설계하기
1. JpaRepository 인터페이스 
2. JpaRepository에서 지원하는 메서드 
- S save(S entity)
- void delete(T entity)	
- count()
- Iterable findAll()

쿼리 메서드

@Query 애노테이션

JPQL

Querydsl


연관 관계 매핑
1. 일대일(1:1) : @OneToOne
2. 일대다(1:N) : @OneToMany
3. 다대일(N:1) : @ManyToOne
4. 다대다(N:M) : @ManyToMany


영속성 전이


지연 로딩
fetch
	- FetchType.LAZY
		참고) N+1 문제 
	- FetchType.EAGER